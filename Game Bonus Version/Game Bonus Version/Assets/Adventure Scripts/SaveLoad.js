import System.IO;
private var filePath : String;
private var filename = "SavedGame";
private var extension = ".gme";


function Start () {

   filePath = Application.dataPath + "/";

   //print (filePath + filename + extension);

}

function WriteFile(fileName : String) {

   var sWrite: StreamWriter = new StreamWriter(filePath + filename + extension);

	// level
	var level = Application.loadedLevel;
	sWrite.WriteLine(level);

	//First Person Controller transforms
	var fpc = GameObject.Find("First Person Controller");
	sWrite.WriteLine(fpc.transform.position.x);
	sWrite.WriteLine(fpc.transform.position.y);  
	sWrite.WriteLine(fpc.transform.position.z);  
	// saving rotation as localEulerAngles to match inspector
	sWrite.WriteLine(fpc.transform.localEulerAngles.y);  

	//Player Settings
	var ps = GameObject.Find("Control Center").GetComponent(GameManager).playerSettings;
	sWrite.WriteLine(ps[0]); //walkSpeed
	sWrite.WriteLine(ps[1]); //turnSpeed
	sWrite.WriteLine(ps[2]); // useText
	sWrite.WriteLine(ps[3]); //objectDescriptions
	sWrite.WriteLine(ps[4]); //fXVolume
	sWrite.WriteLine(ps[5]); //ambVolume  
	sWrite.WriteLine(ps[6]); //musicVolume 
	sWrite.WriteLine(ps[7]); // voiceVolume 
	sWrite.WriteLine(ps[8]); //useMOCursor
	var c = ps[9]; // mouse over color
	sWrite.WriteLine(c[0]); //  moColor r
	sWrite.WriteLine(c[1]); //  moColor g
	sWrite.WriteLine(c[2]); //  moColor b
	sWrite.WriteLine(c[3]); //  moColor a
	sWrite.WriteLine(ps[10]); //  cursorColorChange/slider value

	//Action Objects- get the list generated by the GameManager on Awake
	var ao = GameObject.Find("Control Center").GetComponent(GameManager).actionObjects;
	for (var x =0; x < ao.length; x++) { // iterate through the array of action objects
	   // save its current state 
	   if (ao[x].active == true) sWrite.WriteLine(ao[x]. currentState); 
	   else { // if inactive, wake it up long enough to save its current state
		  ao[x].active = true; // activate it
		  sWrite.WriteLine(ao[x]. currentState);
		  ao[x].active = false; // deactivate it
	   }
	   // if it is an object that can be moved, store its current location/orientation
	   if (ao[x].dropType == 1 || ao[x].dropType == 3) {
		sWrite.WriteLine(ao[x].transform.position.x);
		sWrite.WriteLine(ao[x].transform.position.y);
		sWrite.WriteLine(ao[x].transform.position.z);
		sWrite.WriteLine(ao[x].transform.localEulerAngles.x);
		sWrite.WriteLine(ao[x].transform.localEulerAngles.y);
		sWrite.WriteLine(ao[x].transform.localEulerAngles.z);
	   }
	}
	sWrite.WriteLine ("tracker stuff");
	//Misc object states - check for Misc tag
	var mos = GameObject.FindObjectsOfType(GenericStateTracker);
	for (var mo in mos) {
			mo.SendMessage("UpdateStateVar"); 
			sWrite.WriteLine(mo.GetComponent(GenericStateTracker).state);
	}


   sWrite.Flush();
   sWrite.Close();
}

function ReadFile(fileName : String) {

	//gameObject.Find("Camera Pointer").camera.enabled = false;
	
	var sRead = new File.OpenText(filePath + fileName + extension);

	// level, if the level is different than the present level, load it
	var level = parseInt( sRead.ReadLine());
	if (level != Application.loadedLevel) {
	   GameObject.Find("Main Camera").camera.clearFlags= CameraClearFlags.SolidColor;
	   Application.LoadLevel(level);
	}


	// First Person Controller transforms
	var fpc = GameObject.Find("First Person Controller");
	fpc.transform.position.x  = parseFloat(sRead.ReadLine());
	fpc.transform.position.y  = parseFloat(sRead.ReadLine());
	fpc.transform.position.z  = parseFloat(sRead.ReadLine());
	// using localEulerAngles to match saved rotation
	fpc.transform.localEulerAngles.y  = parseFloat(sRead.ReadLine());

	//player settings
	var ps = Array();
	ps[0] = parseFloat(sRead.ReadLine());//walkSpeed
	ps[1] = parseFloat(sRead.ReadLine());//turnSpeed
	ps[2] = ParseBool(sRead.ReadLine());// useText
	ps[3] = ParseBool(sRead.ReadLine());//objectDescriptions
	ps[4] = parseFloat(sRead.ReadLine());//fXVolume
	ps[5] = parseFloat(sRead.ReadLine());//ambVolume
	ps[6] = parseFloat(sRead.ReadLine());//musicVolume
	ps[7] = parseFloat(sRead.ReadLine());// voiceVolume
	ps[8] = ParseBool(sRead.ReadLine());//useMOCursor
	// mouse over color
	ps[9] = Array (sRead.ReadLine(),sRead.ReadLine(),sRead.ReadLine(),sRead.ReadLine());
	ps[10] = parseFloat(sRead.ReadLine());//cursorColorChange

	//Process action objects- get the list generated by the GameManager on Awake
	var ao = GameObject.Find("Control Center").GetComponent(GameManager).actionObjects;
	for (var x =0; x < ao.length; x++) { // iterate through the array of action objects
	   // process it into the save's state  
	   ao[x].active = true; // activate it
	   ao[x].loading = true; // turn on the loading flag
	   ao[x].SendMessage("ProcessObject",parseInt(sRead.ReadLine()));
	   // if it is an object that can be moved, restore its current location/orientation
	   if (ao[x].dropType == 1 || ao[x].dropType == 3) {
		ao[x].transform.position.x = parseFloat(sRead.ReadLine());
		ao[x].transform.position.y = parseFloat(sRead.ReadLine());
		ao[x].transform.position.z = parseFloat(sRead.ReadLine());
		ao[x].transform.localEulerAngles.x = parseFloat(sRead.ReadLine());
		ao[x].transform.localEulerAngles.y = parseFloat(sRead.ReadLine());
		ao[x].transform.localEulerAngles.z = parseFloat(sRead.ReadLine());
	   }
	}
(sRead.ReadLine()); // trcker stuff
	// process generic state objects
	var mos = GameObject.FindObjectsOfType(GenericStateTracker);
	for (var mo in mos) {
	   mo.SendMessage("LoadState", parseInt(sRead.ReadLine()));
	}

    sRead.Close();
		
	//allow processing time before reactivating the camera again
	//yield new WaitForSeconds (2);
	//gameObject.Find("Camera Pointer").camera.enabled = true;

}


function ParseBool (value : String) {
   if (value  == "True") return true;
   else return false;
}
